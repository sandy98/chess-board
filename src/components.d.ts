/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface ChessBoard {
      'autoPromotion': string;
      'chessSet': string;
      'darkBg': string;
      'empty': () => void;
      'emptyPos': string;
      'flip': () => void;
      'forceUpdate': () => void;
      'game': any;
      'getCoords': () => { left: number; top: number; };
      'getHeight': () => string;
      'getLength': () => number;
      'getMode': () => string;
      'getSets': () => object;
      'getTurn': () => any;
      'goto': (n: number) => void;
      'greeting': string;
      'initialMode': string;
      'initialPosition': string;
      'isFlipped': () => boolean;
      'lightBg': string;
      'modes': object;
      'move': (from: any, to: any, promotion: string) => boolean;
      'remoteMove': (...args: any[]) => any;
      'reset': () => void;
      'rightPanel': boolean;
      'schemas': object;
      'selectSet': (newSet: string) => void;
      'selectedBg': string;
      'setBg': (light: any, dark: any) => void;
      'setGame': (g: any) => void;
      'setSchema': (n: number) => void;
      'setSquare': (sq: number, figure: string) => void;
      'sets': object;
      'setup': () => void;
      'togglePanel': () => void;
      'uuid': string;
      'version': string;
    }
  }

  interface HTMLChessBoardElement extends StencilComponents.ChessBoard, HTMLStencilElement {}

  var HTMLChessBoardElement: {
    prototype: HTMLChessBoardElement;
    new (): HTMLChessBoardElement;
  };
  interface HTMLElementTagNameMap {
    'chess-board': HTMLChessBoardElement;
  }
  interface ElementTagNameMap {
    'chess-board': HTMLChessBoardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'chess-board': JSXElements.ChessBoardAttributes;
    }
  }
  namespace JSXElements {
    export interface ChessBoardAttributes extends HTMLAttributes {
      'autoPromotion'?: string;
      'chessSet'?: string;
      'darkBg'?: string;
      'emptyPos'?: string;
      'game'?: any;
      'greeting'?: string;
      'initialMode'?: string;
      'initialPosition'?: string;
      'lightBg'?: string;
      'modes'?: object;
      'onNewMove'?: (event: CustomEvent) => void;
      'rightPanel'?: boolean;
      'schemas'?: object;
      'selectedBg'?: string;
      'sets'?: object;
      'uuid'?: string;
      'version'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;