/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface ChessBoard {
      'analyze': () => void;
      'autoPromotion': string;
      'canEndHere': (square: number) => boolean;
      'canStartHere': (figure: string) => boolean;
      'default': () => void;
      'empty': () => void;
      'flip': () => void;
      'game': object;
      'getBoardHeight': () => number;
      'getCastling': (n?: number) => string;
      'getCurrent': () => number;
      'getEnPassant': (n?: number) => string;
      'getFenPos': (n?: number) => string;
      'getFullMoveNumber': (n?: number) => string;
      'getHalfMoveClock': (n?: number) => string;
      'getInitialFen': () => string;
      'getMaxPos': () => number;
      'getMode': () => string;
      'getPgnMoves': () => string;
      'getPos': (n?: number) => string;
      'getTurn': (n?: number) => string;
      'goto': (n: number) => void;
      'highLightBg': string;
      'humanSide': string;
      'id': string;
      'initialDarkBgColor': string;
      'initialFen': string;
      'initialFlipped': boolean;
      'initialLightBgColor': string;
      'initialMode': string;
      'isFlipped': () => boolean;
      'play': () => void;
      'rerender': () => void;
      'resetGame': (fen?: string) => void;
      'set': string;
      'setBg': (light: string, dark: string) => void;
      'setSchema': (schema?: string) => void;
      'setSquare': (square: number, figure: string) => void;
      'sets': object;
      'setup': () => void;
      'trashbin': string;
      'undo': () => boolean;
      'useFigurines': boolean;
      'version': string;
      'view': () => void;
    }

    interface ContextMenu {
      'footer': string;
      'header': string;
      'items': number;
      'menuDisplay': string;
      'ovlBg': string;
      'x': number;
      'y': number;
    }

    interface CustomP {

    }
  }


    interface HTMLChessBoardElement extends StencilComponents.ChessBoard, HTMLStencilElement {}

    var HTMLChessBoardElement: {
      prototype: HTMLChessBoardElement;
      new (): HTMLChessBoardElement;
    };
    

    interface HTMLContextMenuElement extends StencilComponents.ContextMenu, HTMLStencilElement {}

    var HTMLContextMenuElement: {
      prototype: HTMLContextMenuElement;
      new (): HTMLContextMenuElement;
    };
    

    interface HTMLCustomPElement extends StencilComponents.CustomP, HTMLStencilElement {}

    var HTMLCustomPElement: {
      prototype: HTMLCustomPElement;
      new (): HTMLCustomPElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'chess-board': JSXElements.ChessBoardAttributes;
    'context-menu': JSXElements.ContextMenuAttributes;
    'custom-p': JSXElements.CustomPAttributes;
    }
  }

  namespace JSXElements {

    export interface ChessBoardAttributes extends HTMLAttributes {
      'autoPromotion'?: string;
      'game'?: object;
      'highLightBg'?: string;
      'humanSide'?: string;
      'id'?: string;
      'initialDarkBgColor'?: string;
      'initialFen'?: string;
      'initialFlipped'?: boolean;
      'initialLightBgColor'?: string;
      'initialMode'?: string;
      'onFlipEvent'?: (event: CustomEvent) => void;
      'onMoveEvent'?: (event: CustomEvent) => void;
      'set'?: string;
      'sets'?: object;
      'trashbin'?: string;
      'useFigurines'?: boolean;
      'version'?: string;
    }

    export interface ContextMenuAttributes extends HTMLAttributes {
      'footer'?: string;
      'header'?: string;
      'items'?: number;
      'menuDisplay'?: string;
      'onCloseMenu'?: (event: CustomEvent) => void;
      'ovlBg'?: string;
      'x'?: number;
      'y'?: number;
    }

    export interface CustomPAttributes extends HTMLAttributes {

    }
  }

  interface HTMLElementTagNameMap {
    'chess-board': HTMLChessBoardElement
    'context-menu': HTMLContextMenuElement
    'custom-p': HTMLCustomPElement
  }

  interface ElementTagNameMap {
    'chess-board': HTMLChessBoardElement;
    'context-menu': HTMLContextMenuElement;
    'custom-p': HTMLCustomPElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;